{"version":3,"sources":["methods.js"],"names":[],"mappings":"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","file":"methods-compiled.js","sourcesContent":["import _ from 'underscore';\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { Email } from 'meteor/email';\n\nimport { Parties } from './collection';\n\nfunction getContactEmail(user) {\n    if (user.emails && user.emails.length)\n        return user.emails[0].address;\n\n    if (user.services && user.services.facebook && user.services.facebook.email)\n        return user.services.facebook.email;\n\n    return null;\n}\n\nexport function invite(partyId, userId) {\n    check(partyId, String);\n    check(userId, String);\n\n    if (!this.userId) {\n        throw new Meteor.Error(400, 'You have to be logged in!');\n    }\n\n    const party = Parties.findOne(partyId);\n\n    if (!party) {\n        throw new Meteor.Error(404, 'No such party!');\n    }\n\n    if (party.owner !== this.userId) {\n        throw new Meteor.Error(404, 'No permissions!');\n    }\n\n    if (party.public) {\n        throw new Meteor.Error(400, 'That party is public. No need to invite people.');\n    }\n\n    if (userId !== party.owner && ! _.contains(party.invited, userId)) {\n        Parties.update(partyId, {\n            $addToSet: {\n                invited: userId\n            }\n        });\n\n        const replyTo = getContactEmail(Meteor.users.findOne(this.userId));\n        const to = getContactEmail(Meteor.users.findOne(userId));\n\n        if (Meteor.isServer && to) {\n            Email.send({\n                to,\n                replyTo,\n                from: 'noreply@socially.com',\n                subject: `PARTY: ${party.title}`,\n                text: `\n          Hey, I just invited you to ${party.title} on Socially.\n          Come check it out: ${Meteor.absoluteUrl()}\n        `\n            });\n        }\n    }\n}\nexport function rsvp(partyId, rsvp) {\n    check(partyId, String);\n    check(rsvp, String);\n\n    if (!this.userId) {\n        throw new Meteor.Error(403, 'You must be logged in to RSVP');\n    }\n\n    if (!_.contains(['yes', 'no', 'maybe'], rsvp)) {\n        throw new Meteor.Error(400, 'Invalid RSVP');\n    }\n\n    const party = Parties.findOne({\n        _id: partyId,\n        $or: [{\n            // is public\n            $and: [{\n                public: true\n            }, {\n                public: {\n                    $exists: true\n                }\n            }]\n        },{\n            // is owner\n            $and: [{\n                owner: this.userId\n            }, {\n                owner: {\n                    $exists: true\n                }\n            }]\n        }, {\n            // is invited\n            $and: [{\n                invited: this.userId\n            }, {\n                invited: {\n                    $exists: true\n                }\n            }]\n        }]\n    });\n\n    if (!party) {\n        throw new Meteor.Error(404, 'No such party');\n    }\n\n    const hasUserRsvp = _.findWhere(party.rsvps, {\n        user: this.userId\n    });\n\n    if (!hasUserRsvp) {\n        // add new rsvp entry\n        Parties.update(partyId, {\n            $push: {\n                rsvps: {\n                    rsvp,\n                    user: this.userId\n                }\n            }\n        });\n    } else {\n        // update rsvp entry\n        const userId = this.userId;\n        Parties.update({\n            _id: partyId,\n            'rsvps.user': userId\n        }, {\n            $set: {\n                'rsvps.$.rsvp': rsvp\n            }\n        });\n    }\n}\n\nMeteor.methods({\n    invite,\n    rsvp\n});\n\n"]}